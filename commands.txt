bash --version
echo $SHELL --> To see the main shell in my computer
history | less --> To see the content in an interactive way
history | wc --> To see the amount of lines, words and characterers in a file
cat commands.txt | wc -l
cat commands.txt | wc -w
cat commands.txt | wc -c

Piping is usually used with the following tools:
    grep, awk, sed, cut

Other editors that I could use --> EMACS or ED

----

What do 0,1, and 2 mean Bourne Shell?

0 --> Standard input (stdin)
1 --> Standard output (stdout)
2 --> Standart error (stderr)

----

ls > output.txt --> Truncate
ls >> output.txt --> Append

ls /notreal 1> output.txt 2> error.txt
ls /notreal 1>> output.txt 2>> error.txt

I can use too "ls /notreal 0> output.txt" but, it's a bit counterproductive, things doesn't work well here

When using ">" or ">>" the default number used on background is 1

cat < commands.txt
ls | cat

cat << EndOfText
This is
a multiline
bash command giver
EndOfText

----

Piping is used to send streams from one program to another

Redirection is used to send strems from one file to another

----
|
>
>>
1>
2>
1>>
2>>
<
<<

<< EndOfText
    "Commands"
EndOfText

----
Built-in functions

echo  --> Output something on the shell adding a jumpspace
printf  --> Output something on he shell without add a jumpspace
command echo  --> To execute external program version of a command (echo could be a built-in or an external program)
builtin echo  --> To execute the built-in program version of a command
command -V echo  --> To realize if the command is an external program or a built-in program (This is a built-in)
command -V df  --> To realize if the command is an external program or a built-in program (This is an external program)

The default is always the built-in programs

enable -n echo --> To disable the built-in form of a program as default. In this case, the external program will default to echo
enable -n  --> To see the whole list of disabled built-in commands
enable echo  --> To enable the built-in command echo as the default
help echo --> To see the manpages of a built-in command. Built-in commands have different manpages
help --> To see the builtins that bash provides

----

Bash Expansions and Substitutions:

~  --> Tilde expansion
{...}  --> Brace expansion
${...}  --> Parameter expansion
$(...)  --> Also `...`  --> Command expansion
$((...)) --> Also $[...]  --> Arithmetic expansion

----

Tilde Expansion  --> To save the user's HOME directory

echo ~  --> Too see what's user's home. It is not the "global" home
echo $HOME  --> To do exactlly the same as previous command

whoami  --> To see what's the user I'm using
echo $USER  --> To do the same as previous command

echo ~- --> To see the previous directory I was in
echo $OLDPWD --> To do exactly the same as previous command

----

Brace Expansion  --> To express range of numbers or any other sequence shorter

echo /tmp/{one,two,three}/file.txt
    /tpm/one/file.txt /tpm/two/file.txt /tpm/three/file.txt

echo c{a,o,u}t
    cat cot cut

echo /tmp/{1..3}/file.txt
    /tmp/1/file.txt /tmp/2/file.txt /tmp/3/file.txt

echo {00..100}
    000 001 002 003 004 (more numbers) 097 098 099 100
    
echo {1..10}
echo {10..1}

echo {01..100}
echo {00001..10}

echo {100..00}

echo {a..z}
echo {Z..A}

echo {1..30..3}

echo {a..z..2}

touch file_{01..12}{a..d}
rm file_*

echo {cat,dog,fox}
echo {cat,dog,fox}_{1..5}

head -n1 {dir1,dir2,dir3}/lorem.txt

----

Parameter Expansion  --> To retreive the value of variables

a="Hello World World"
    echo $a  --> Retrieves the value of variable a. This is different to "echo a" because this "a" is not represented as a variable just a character.
        Hello World World
    echo ${a}  --> This is exactly the same as previous command
        Hello World World
    echo ${a:4}
        o World World
    echo ${a:1:12}
        ello World W
    echo ${a:6:3}
        Wor
    echo ${a/World/Everybody}  --> This is called Pattern Susbstitution
        Hello Everybody World
    echo ${a//World/Everybody}  --> This is called Pattern Susbstitution
        Hello Everybody Everybody
    echo ${a//o/_}  --> This is called Pattern Susbstitution
        Hell_ W_rld W_rld
    echo $a:1:12  --> Everything after the variable is gonna be interpreted as characters not as a Parameter Expansion. That's why the most of the times es important to add the {} to use the tools provided by Paremeter Substitution
        Hello World World:1:12

----

Command Expansion  --> To encapsulate commands inside another command

It is usally used with string manipulation tools like "echo" to extract a part of a command's output such as a:

    Path
    File size
    IP address
    So on

It is usually used with tools like

    grep
    awk
    cut

I can represent it as:
    $(...)  --> This is the most used
    `...`  --> This isn't the most used because is apparentely a bit confusing

uname -r

echo "The kernel is $(uname -r)."
echo "The kernel is `uname -r`."

echo "The python version is $(python3 -V)"
echo "The python version is `python3 -V`"

echo "Result: $(python3 -c 'print("Hello from Python!")')"
echo "Result: `python3 -c 'print("Hello from Python!")'`"

echo "Result: $(python3 -c 'print("Hello from Python!")' | tr [a-z] [A-Z])"
echo "Result: `python3 -c 'print("Hello from Python!")' | tr [a-z] [A-Z]`"

----

Arithmetic Expansion  --> It's similar to Parameter Expansions but this time it's used for Arithmetic Expressions

Older representation $[]

echo $((2+2))
echo $((3-2))
echo $((3*4))
echo $((4/5))

echo $[2+2]
echo $[3-2]
echo $[3*4]
echo $[4/5]

Bash can only calculate operations using integers

----

Combination of Parameter Expansion and Arithmetic Expansion

echo "Result: $(python3 -c 'print("Hello from Python!")') $((2+2))"
    Result: Hello from Python! 4

echo "Result: $(python3 -c 'print("Hello from Python!")') $((2+2))"  --> It returns exactly as previous command but it's using back ticks instead of dollar sign + parenthesis.
    Result: Hello from Python! 4






----

Bash Scripts Foundations  --> What to know before writing bash shell scripts

One-liners bash programs are useful when using it with aliases to use one alias to execute the whole set of commands separated by semicolon.

Ways to execute multi-liners bash programs:

    - bash file.sh

    - Including the shebang line as the first line (#!/usr/bin/env bash). This case is bash but it can be Python or Ruby or whatever interpreted scripting language (But I have to give privileges to the file using "chmod +x file.sh") (The code should be executed using the command "./file.sh").
        - The previous shebang finds the shell used by the environment, but there could be another shebang more directly, something like (The code should be executed using the command "./file.sh"):
            - #!/usr/bin/bash
        - I can also use in python code, the following (The code should be executed using the command "./file.sh"):
            - #!/usr/bin/python3
        - I can also execute .sh files prompting in the bash shell something like:
            - /usr/bin/bash file.sh
        - Or:
            - /usr/bin/env bash file.sh
        - I can also execute .py files prompting in the bash shell something like:
            - /usr/bin/python3 file.py

    - Running locally with ./file.sh or file if in the $PATH

    - I can also name the files without using the .sh

- I have to use the following tools if I need to set or unset certaing configurations made to the bash shell (change options for the shubshell):
    
    set
    shopt

----

echo command

echo hello
echo hello world

embeddedWord="nice"
echo Hi $embeddedWord world!
echo Hi ${embeddedWord} world!

echo "Hi $embeddedWord world!"
echo "Hi ${embeddedWord} world!"

echo Hi $embeddedWord $(uname -r)
echo "Hi $embeddedWord $(uname -r)"

echo The (kernel) is $(uname -r)  --> The first parenthesis gives an error
echo "The (kernel) is $(uname -r)"  --> This is the solution to the previous command error
echo Hi \(big\) world. The kernel is $(uname -r)  --> Another solution

echo 'Hi \(big\) world. The kernel is $(uname -r)' --> These single quotes don't allow to execute Tilde, Brace, Parameter, Command or Arithmetic Expansions. Everything is treated as characters only. These are the strong quotes, those are outputted as written.

echo "Hi \(big\) world. The kernel is $(uname -r)" --> These double quotes will allow us to execute Tilde, Brace, Parameter, Command or Arithmetic Expansions. These quote are more flexible

echo;echo "Ni hao!";echo  --> A way to convine echo commands

echo -n "Ni hao" --> Turns out the new line

echo -n "There are two echo commands"; echo -n "outputting a text in just one line"
echo -n "There are two echo commands"; echo "outputting a text in just one line + a jumpspace"

----

Variables

- Variables:
    - are case sensitive
    - musn't have spaces after or before the equal command
    - are special case of parameter expansion

_var=hi
_var="hi hi"  --> I need to use double quotes to use spaces in the value of a variable
_var=7

echo $_var
echo ${_var}  --> This gives us exactly the same output as previous commands

declare -r _immutable_var=14

declare -l _lowercase_var="HELLO HELLO"  --> To define a bucket where whatever value I assigned to would be always cast to lowercase 
_lowercase_var="NI HAO NI HAO"  --> As I have already defined the bucket with the feature of casting everything to lowercase, this new value will be outputted all in lowercase

declare -u _uppercase_var="hi hi"  --> To do the same as both previous commands but uppercase
_uppercase_var="guten morgen"  --> To do the same as lowercase previous commands put uppercase

declare -p  --> To see the whole list of variables that have been set in the current session

echo $USER

----

Working with numbers:
    
    - $(())  --> Arithmetic Expansion
    - (())  --> Arithmetic Evaluation

Operation I can perform in Bash Shell:

    - Addition
    - Subtraction
    - Mutiplication
    - Division
    - Modulo
    - Exponentiation

echo $(( (3+6)*12 - (2**7)  ))  --> I can use embedded parenthesis inside an Arithmetic Expansion

a=3
((a+=3))  --> To implement the change of value without using the $(())
((a++))  --> To do the same as previous command
((a--))  --> To do the same as previous command

echo $((a+=3))  --> To do exactly the same as the previous Arithmetic Evaluation but using Arithmetic Expansion. In this case the echo returns a value that represents the value of the variable "a" before applying the mathematical operation.
echo $((a++))  --> To do the same as previous command
echo $((a--))  --> To do the same as previous command

((a+=2))
((a-=2))
((a*=2))
((a/=2))
((a%=2))

echo $((a+=2))
echo $((a-=2))
echo $((a*=2))
echo $((a/=2))
echo $((a%=2))

((a**=2))  --> This is not possible
((a=a**2))  --> This is the solution to the previous commanddeclare -i c

We musn't use $ before variables inside the Arithmetic Expansion or Evaluation. It's gonna return an error

b=$a+1 --> Bash treats this as a string. The result of this would be (in the case a is equal to 2):
    2+1

declare -i b=3 --> To solve a the previous problem declaring a bucket that has the features of an integer.
b=$b+1 --> This is not gonna return a string as the previous command, instead the result would be (in the case a is equal to 2):
    3

If I need to work with floating numbers I have to use:

    bc (Basic Calculator)
    awk

declare -i e=1
declare -i f=3
n=$(echo "scale=3; $e/$f" | bc)  --> To give floating results
echo $n  --> This is going to return .333, but this isn't a number, this is a string that's equal to ".333"

echo $RANDOM  --> To give a number randomly between 0 - 32767

echo $(( 1 + RANDOM ))  --> To get a number randomly between 1 - 32767
echo $(( 1 + RANDOM % 10 ))  --> To get a number randomly between 1 - 10
echo $(( 1 + RANDOM % 20 ))  --> To get a number randomly between 1 - 20
echo $(( 1 + RANDOM % 100 ))  --> To get a number randomly between 1 - 100

Bash scripting isn't suited to make a lot of calculations. If we need it, we should replace to another programming language

----

Comparing values using test

Right here:

    - 0 = true
    - 1 = false

help test | less  --> To know which flags I could add inside []

[ -d ~ ]; echo $?  --> I need to use this to know which the exit status from the previous comand was. In this case the result is 0 because ~ is a directory

It's important to add spaces to the insides of the brackets

[ -d /bin/bash ]; echo $?  --> The result of this last command is 1 because /bin/bash is a file

[ -d /bin ]; echo $?  --> The result is 0 because /bin is a directory

[ "cat" = "dog" ]; echo $? --> The result of this is 1 because "cat" is different to "dog"

[ 1 = 1 ]; echo $?  --> The result of this is 0 because both elements are equal

The following symbols are used only by strings  >, >=, <, <= . We can compare strings using these symbols because it compares if the characters within a word a earlier or later in the character set.

The symbol equal (=) is the only one that could be use in numbers and characters. I guess it happens because in both ways the elements are treated as characters, even when they're numbers.

The followings are the symbols used to compare numbers:

    [ 1 -lt 5 ]; echo $?  --> The result of these set of commands is 0

    [ ! 1 -lt 5 ]; echo $? --> The result of these set of commands is 1

----

Comparing values using extended test

We could use more than one comparing expression inside extended test

[[  ]] --> This is called extended tests and give us extended tools not provided by regular test, say, []

[[ -d ~ && -a /bin/bash ]]; echo $?  --> This is an AND. The result is 0

[[ -d ~ || -a /bin/bashh ]]; echo $?  --> This is an OR. The result is 0

I could also use comparison operators after [[]]:
    [[ -d ~ ]] && echo ~ is a directory  --> This runs if the statement inside of double brackets is true
    ls && echo something   --> This runs if the statement before double ampersand is true
    true && echo something  --> This runs if the statement before double ampersand is true
    false && echo shomething  --> This runs if the statement before double ampersand is true

As seen previously just executing some commands like "ls" returns true

[[ "cat" =~ c.* ]]; echo $?  --> I can use regular regular expressions. In this example we're telling with "c.*" that we are gathering the whole set of words that begin with "c" and have any other amount of characters. The result in this case is 0

Things to check out about bash:
    "Bash Patterns and Regular Expressions"

----
echo -e "\a"
echo -e "Name\t\tNumber"; echo -e "Scott\t\t123"
echo -e "This text\nbreaks over\nthree lines"
echo -e "Ding\a"

----
echo "The results are: $(( 2 + 2 )) and $(( 3 / 1 ))"
printf "The results are: %d and %d\n" $(( 2 + 2 )) $(( 3 / 1 ))

----

Arrays

In bash there are

    Indexed Arrays
    Associative Arrays

Indexed Arrays

    snacks=("apple" "banana" "orange")  --> To declare an array implicitly

    declare -a snacks=("apple" "banana" "orange")  --> To declare an array explicitly

    echo ${snacks[2]}  --> To access elements of an array
    snacks[5]="grapes"  --> To add an element in the fifth position

    snacks+=("mango")  --> To add an element at the end of the array
    snacks+="mango"  --> To append an element at the beginning of the array

    echo ${snacks[@]}  --> To retrieve the whole set of values inside the array. This is not shown by the spaces of the array that are empty

    for i in {0..6}; do echo "$i: ${snacks[$i]}"; done  --> I could do the same as previous command but showing the empty spaces

Associative Arrays (as JSONs)  --> It exists in the versions of bash four or below

    declare -A office  --> To declare the structure as key-value pair

    office[city]="San Francisco"
    office["building name"]="HQ West"

    echo ${office[city]}  --> To acces the value of the a specific key
    echo ${office["building name"]}  --> To do exactly the same as the previous command. This key needs double quotes because the name has an space

    echo ${office["building name"]} is in ${office[city]}"

    echo ${!office[@]} --> To acquire all keys
    echo ${office[@]} --> To acquire all values

Bash doesn't support nested arrays,so, if I need to use nested arrays I have to move to another program language suited for it